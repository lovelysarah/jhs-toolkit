// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Tag {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  description String
  items       Item[]

  inventory   InventoryLocation @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  inventoryId String            @db.ObjectId

  created_at DateTime @default(now())

  created_by    User   @relation(fields: [created_by_id], references: [id])
  created_by_id String @db.ObjectId
}

enum CHECKOUT_TYPE {
  PERMANENT
  TEMPORARY
}

model CartItem {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  checkout_type CHECKOUT_TYPE

  quantity Int
  item     Item   @relation(fields: [item_id], references: [id], onDelete: Cascade)
  item_id  String @db.ObjectId

  cart    Cart   @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  cart_id String @db.ObjectId
}

model Cart {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user    User   @relation(fields: [user_id], references: [id])
  user_id String @db.ObjectId

  items CartItem[]

  inventory    InventoryLocation @relation(fields: [inventory_id], references: [id], onDelete: Cascade)
  inventory_id String            @db.ObjectId
}

model InventoryLocation {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  short_id     String        @unique
  description  String?
  name         String
  display_name String
  items        Item[]
  carts        Cart[]
  transactions Transaction[]
  tags         Tag[]

  deleted_at      DateTime?
}

enum TransactionStatus {
  PENDING
  COMPLETED
}

enum InventoryActionType {
  CHECK_IN
  CHECK_OUT
}

model Transaction {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  link_id String
   
  items Json[]
  item_count Int
  
  PERMA_user_account      String
  PERMA_user_display_name String
  PERMA_inventory_name    String

  status        TransactionStatus
  action_type   InventoryActionType
  checkout_type CHECKOUT_TYPE
  note          String?

  by_guest Boolean @default(false)

  created_at DateTime @default(now())
  resolved_at DateTime?

  inventory    InventoryLocation @relation(fields: [inventory_id], references: [id])
  inventory_id String            @db.ObjectId

  user    User   @relation(fields: [user_id], references: [id])
  user_id String @db.ObjectId
}

model Item {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  short_id String @unique

  name        String
  description String?
  note        String?

  quantity Int @default(1)

  tag    Tag    @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  tag_id String @db.ObjectId

  carts CartItem[]

  last_checked_out_by String?
  last_checked_out_at DateTime?

  location    InventoryLocation @relation(fields: [location_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  location_id String            @db.ObjectId
}

model User {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  username          String            
  password          String
  name              String
  account_type      ACCOUNT_TYPE
  carts             Cart[]
  transactions      Transaction[]
  version           Int               @default(0)
  Tag               Tag[]
  deleted_at        DateTime?

  @@unique([username, deleted_at])
}

enum ACCOUNT_TYPE {
  ADMIN
  USER
  GUEST
}
